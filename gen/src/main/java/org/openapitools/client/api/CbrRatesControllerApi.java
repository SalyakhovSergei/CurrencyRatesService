/*
 * Axioma OMNI currency rates REST API
 * Получение информации по официальным курсам валют ЦБ и курсам металлов. Промышленный сервис находится по адресу https://, тестовый сервис - по адресу https://ingress-ds1-genr01-fxrt-dev1.apps.ds1-genr01.corp.dev.vtb/fxrates-cbr/v1/api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vizgalov@vtb.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GlobalErrorResponse;
import org.openapitools.client.model.LatestRatesDateResponse;
import org.threeten.bp.LocalDate;
import org.openapitools.client.model.RatesOnDateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CbrRatesControllerApi {
    private ApiClient localVarApiClient;

    public CbrRatesControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CbrRatesControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for dailyFxrates
     * @param date Дата получения курса. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное получение информации по курсам валют ЦБ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Неверный параметр запроса. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Пользователь не авторизован. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Неверный адрес запроса. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dailyFxratesCall(LocalDate date, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cbr/daily_fxrates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dailyFxratesValidateBeforeCall(LocalDate date, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dailyFxratesCall(date, _callback);
        return localVarCall;

    }

    /**
     * Получение информации по курсам валют ЦБ
     * Получение информации по курсам валют ЦБ.
     * @param date Дата получения курса. (optional)
     * @return RatesOnDateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное получение информации по курсам валют ЦБ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Неверный параметр запроса. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Пользователь не авторизован. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Неверный адрес запроса. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка. </td><td>  -  </td></tr>
     </table>
     */
    public RatesOnDateResponse dailyFxrates(LocalDate date) throws ApiException {
        ApiResponse<RatesOnDateResponse> localVarResp = dailyFxratesWithHttpInfo(date);
        return localVarResp.getData();
    }

    /**
     * Получение информации по курсам валют ЦБ
     * Получение информации по курсам валют ЦБ.
     * @param date Дата получения курса. (optional)
     * @return ApiResponse&lt;RatesOnDateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное получение информации по курсам валют ЦБ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Неверный параметр запроса. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Пользователь не авторизован. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Неверный адрес запроса. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RatesOnDateResponse> dailyFxratesWithHttpInfo(LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = dailyFxratesValidateBeforeCall(date, null);
        Type localVarReturnType = new TypeToken<RatesOnDateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение информации по курсам валют ЦБ (asynchronously)
     * Получение информации по курсам валют ЦБ.
     * @param date Дата получения курса. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное получение информации по курсам валют ЦБ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Неверный параметр запроса. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Пользователь не авторизован. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Неверный адрес запроса. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dailyFxratesAsync(LocalDate date, final ApiCallback<RatesOnDateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dailyFxratesValidateBeforeCall(date, _callback);
        Type localVarReturnType = new TypeToken<RatesOnDateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dailyFxratesLatestDate
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное получение последней даты курсов валют ЦБ. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Пользователь не авторизован. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Неверный адрес запроса. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dailyFxratesLatestDateCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cbr/daily_fxrates/latest_date";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dailyFxratesLatestDateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dailyFxratesLatestDateCall(_callback);
        return localVarCall;

    }

    /**
     * Получение последней даты курсов валют ЦБ
     * Получение последней даты курсов валют ЦБ.
     * @return LatestRatesDateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное получение последней даты курсов валют ЦБ. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Пользователь не авторизован. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Неверный адрес запроса. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка. </td><td>  -  </td></tr>
     </table>
     */
    public LatestRatesDateResponse dailyFxratesLatestDate() throws ApiException {
        ApiResponse<LatestRatesDateResponse> localVarResp = dailyFxratesLatestDateWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Получение последней даты курсов валют ЦБ
     * Получение последней даты курсов валют ЦБ.
     * @return ApiResponse&lt;LatestRatesDateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное получение последней даты курсов валют ЦБ. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Пользователь не авторизован. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Неверный адрес запроса. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LatestRatesDateResponse> dailyFxratesLatestDateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dailyFxratesLatestDateValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LatestRatesDateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение последней даты курсов валют ЦБ (asynchronously)
     * Получение последней даты курсов валют ЦБ.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное получение последней даты курсов валют ЦБ. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Пользователь не авторизован. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Неверный адрес запроса. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dailyFxratesLatestDateAsync(final ApiCallback<LatestRatesDateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dailyFxratesLatestDateValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LatestRatesDateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
